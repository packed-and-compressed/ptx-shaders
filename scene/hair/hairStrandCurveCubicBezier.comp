#include "hairStrandCommon.comp"

uniform uint uNumSegments;

USE_BUFFER(vec4, bPointsBuffer);
USE_BUFFER(vec3, bVertexColorsBuffer);
USE_STRUCTUREDBUFFER(CurveSegment, bSegmentsBuffer);
USE_STRUCTUREDBUFFER(HairStrand, bStrandsBuffer);
USE_LOADSTORE_STRUCTUREDBUFFER(HairVertex, bEvaluatedBuffer, 0);

template<typename T>
T evaluateCubicBezier(float t, T p0, T p1, T p2, T p3)
{
    const float t2 = t * t;
    const float t3 = t2 * t;

    const float c0 = -t3 + 3.0 * t2 - 3.0 * t + 1.0;
    const float c1 = 3.0 * t3 - 6.0 * t2 + 3.0 * t;
    const float c2 = -3.0 * t3 + 3.0 * t2;
    const float c3 = t3;

    return c0 * p0 + c1 * p1 + c2 * p2 + c3 * p3;
}

vec4 evaluatePoint(float t, CurveSegment segment)
{
    const uint offset = segment.offset;
    vec4 p0 = bPointsBuffer[offset + 0];
    vec4 p1 = bPointsBuffer[offset + 1];
    vec4 p2 = bPointsBuffer[offset + 2];
    vec4 p3 = bPointsBuffer[offset + 3];
    return evaluateCubicBezier( t, p0, p1, p2, p3 );
}

vec3 evaluateColor(float t, CurveSegment segment)
{
    const uint offset = segment.offset;
    vec3 p0 = bVertexColorsBuffer[offset + 0];
    vec3 p1 = bVertexColorsBuffer[offset + 1];
    vec3 p2 = bVertexColorsBuffer[offset + 2];
    vec3 p3 = bVertexColorsBuffer[offset + 3];
    return evaluateCubicBezier( t, p0, p1, p2, p3 );
}

COMPUTE(MAX_THREAD_COUNT, 1, 1)
{
    if ( DISPATCH_THREAD_ID.x >= uNumSegments )
    { return; }

    // Each thread processes one segment
    CurveSegment segment = bSegmentsBuffer[DISPATCH_THREAD_ID.x];
    HairStrand strand = bStrandsBuffer[DISPATCH_THREAD_ID.x];

    uint offset = strand.offset;
    for (uint i = 0; i < strand.size; ++i)
    {
        float t = float(i) / float(strand.size - 1);
        vec4 p = evaluatePoint( t, segment );
        vec3 c = evaluateColor( t, segment );
    
        HairVertex v;
        v.position = p.xyz;
        v.radius = p.w * 0.5;
        v.t = t;
        v.color = c;
        bEvaluatedBuffer[offset + i] = v;
    }
}
