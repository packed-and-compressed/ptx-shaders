USE_TEXTURE2D(tTex1);
USE_TEXTURE2D(tTex2);
USE_TEXTURE2D(tLevelTex);

uniform float uMonoLevel;		//true if we're using a mask for the levels input
USE_INTERLOCKED_BUFFER(bHistogram,0);

#define blurredLoad(tex)\
	0.2 * (imageLoad(tex, DISPATCH_THREAD_ID.xy) + imageLoad(tex, uint2(DISPATCH_THREAD_ID.x +1, DISPATCH_THREAD_ID.y))+\
		imageLoad(tex, uint2(min((uint)0, DISPATCH_THREAD_ID.x -1), DISPATCH_THREAD_ID.y))+\
		imageLoad(tex, uint2(DISPATCH_THREAD_ID.x, min((uint)0, DISPATCH_THREAD_ID.y -1)))+\
		imageLoad(tex, uint2(DISPATCH_THREAD_ID.x, DISPATCH_THREAD_ID.y+1)));
		
COMPUTE(16,16,1)
{
	//check bounds
	uint2 size; uint mipCount;
	imageSize2D( tTex1, size.x, size.y, mipCount );
	if( DISPATCH_THREAD_ID.x >= size.x || DISPATCH_THREAD_ID.y >= size.y )
	{ return; }

	//load color
	vec4 v1 = imageLoad(tTex1, DISPATCH_THREAD_ID.xy);
	vec4 v2 = imageLoad(tTex2, DISPATCH_THREAD_ID.xy);
	vec4 tLevel = imageLoad(tLevelTex, DISPATCH_THREAD_ID.xy);
	tLevel = mix(tLevel, tLevel.xxxw, uMonoLevel);
//	v1 = blurredLoad(tTex1);
//	v2 = blurredLoad(tTex2);
//	tLevel = blurredLoad(tLevelTex);

	vec3 difff = (v1.xyz*255.0-v2.xyz*255.0);
	uint3 diff = uint3( difff*difff );
	
	//convert color to integer bin value
	uint3 bins = uint3( floor( tLevel.xyz * 255.0 + vec3(0.5,0.5,0.5) ) );
	
	//increment histogram values
	uint prev;
	interlockedAdd( bHistogram, bins.r*2, diff.x, prev );
	interlockedAdd( bHistogram, bins.r*2+1, 1, prev );
	interlockedAdd( bHistogram, bins.g*2, diff.y, prev );
	interlockedAdd( bHistogram, bins.g*2+1, 1, prev );
	interlockedAdd( bHistogram, bins.b*2, diff.z, prev );
	interlockedAdd( bHistogram, bins.b*2+1, 1, prev );
}
