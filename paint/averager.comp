//
// averager.comp
// See Averager.h on how to use this shader and class
//
#ifndef _AVERAGER_COMP
#define _AVERAGER_COMP

#include "data/shader/common/dispatchSwizzle.comp"

#if defined( USE_PIXEL_MASK )
	USE_TEXTURE2D( tPixelMask );
#endif // defined( USE_PIXEL_MASK )

USE_TEXTURE2D( tSrc );
USE_INTERLOCKED_BUFFER( bAverageColor, 0 );

uniform ivec2 uResolution;

#define KERNEL_SIZE 4

#if defined( USE_PIXEL_MASK )
	int getRasterPixelMapIndex( uvec2 texelCoord )
	{
		float fvalue = imageLoad(tPixelMask, texelCoord).x;
		int ivalue = asint(fvalue);
		return ivalue;
	}
#endif // defined( USE_PIXEL_MASK )

COMPUTE( 8, 8, 1 )
{
	uvec2 minBound = DISPATCH_THREAD_ID_8x8.xy * uvec2( KERNEL_SIZE, KERNEL_SIZE );
	uvec2 maxBound = minBound + uvec2( KERNEL_SIZE, KERNEL_SIZE );

	unsigned int totalPixelCount = 0;
	vec3 avgColor = vec3( 0.0, 0.0, 0.0 );
	for( unsigned int i = minBound.x; i < maxBound.x; ++i )
	{
		for( unsigned int j = minBound.y; j < maxBound.y; ++j )
		{
			uvec2 pCoord = uvec2( i, j );
			if( any( pCoord >= uvec2( uResolution.xy ) ) )
			{
				continue; // skip out of bounds pixels
			}

			#if defined( USE_PIXEL_MASK )
				if( getRasterPixelMapIndex( pCoord ) <= 0 ) // we want to copy only the positive values, i.e. uv island's pixels
				{ continue; }
			#endif // defined( USE_PIXEL_MASK )

			vec3 color = imageLoad( tSrc, pCoord ).rgb;
			avgColor += color;
			totalPixelCount++;
		}
	}

	if( totalPixelCount != 0 )
	{
		avgColor /= totalPixelCount;
	}

	uint3 bins = uint3( floor( avgColor * 255.0 + vec3( 0.5,0.5,0.5 ) ) );

	unsigned int prev = 0;
	interlockedAdd( bAverageColor, 0, bins.r, prev );
	interlockedAdd( bAverageColor, 1, bins.g, prev );
	interlockedAdd( bAverageColor, 2, bins.b, prev );
	interlockedAdd( bAverageColor, 3, totalPixelCount != 0 ? 1 : 0, prev );
}


#endif // _AVERAGER_COMP
